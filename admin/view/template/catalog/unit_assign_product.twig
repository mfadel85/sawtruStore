{{ header }}{{ column_left }}
<div id="content">
  <div class="page-header">
    <div class="container-fluid">
      <div class="pull-right">
        <button type="button" data-toggle="tooltip" title="{{ button_filter }}" onclick="$('#filter-product').toggleClass('hidden-sm hidden-xs');" class="btn btn-default hidden-md hidden-lg"><i class="fa fa-filter"></i></button>
        <a href="{{ add }}" data-toggle="tooltip" title="{{ button_add }}" class="btn btn-primary"><i class="fa fa-plus"></i></a>
        <button type="button" form="form-product" formaction="{{ delete }}" data-toggle="tooltip" title="{{ button_delete }}" class="btn btn-danger" onclick="confirm('{{ text_confirm }}') ? $('#form-unit').submit() : false;"><i class="fa fa-trash-o"></i></button>
      </div>
      <h1>{{ heading_title }} </h1>
      <ul class="breadcrumb">
        {% for breadcrumb in breadcrumbs %}
        <li><a href="{{ breadcrumb.href }}">{{ breadcrumb.text }}</a></li>
        {% endfor %}
      </ul>
    </div>
  </div>
  <div class="container-fluid">{% if error_warning %}
      <div class="alert alert-danger alert-dismissible"><i class="fa fa-exclamation-circle"></i> {{ error_warning }}
      <button type="button" class="close" data-dismiss="alert">&times;</button>
    </div>
    {% endif %}
    {% if success %}
    <div class="alert alert-success alert-dismissible"><i class="fa fa-check-circle"></i> {{ success }}
      <button type="button" class="close" data-dismiss="alert">&times;</button>
    </div>
    {% endif %}
    <div class="row">
      <div class="col-md-10">
        <table class="table table-bordered unitTableD"> 
        <tr>
        <th>ShelfNo</th>
        {% for i in range(1, beltCount) %}
          <th>  {{ i }}</th>
        {% endfor %}
        </tr>
        {% for shelf in unit %}
        <tr id=" {{ shelf.shelfID }} ">
        <td>{{ shelf.physicalRow }}</td>
          {% for belt in shelf.contents %}
          <td 
            data-column="column{{ loop.index }}"
            id="r{{ loop.parent.loop.index }}c{{ loop.index}}"
            data-barcode="{{ belt[7]}}" 
            data-filled="{{ belt[3] }}"
             data-product-id="{{ belt[2] }}"
            {% if belt[8] == 0 %}
              class="cell CellWithComment Empty inactive"
            {% elseif belt[3] == 0 %}
              class="cell CellWithComment Empty"
            {% elseif  belt[3] %}
              class="cell CellWithComment Full"
            {% endif %}
          >
          {% if belt[1] > 0 %}
           {{ belt[2] }}:  {{ belt[3] }} / {{ belt[5] }} 
          {% else  %}
             No Product
          {% endif %}
		    <span class="CellComment">{{ belt[9] }}  {{ belt[2] }}:  {{ belt[3] }} / {{ belt[5] }} - {{ belt[7] }} </span>

           </td>
          {% endfor %}
        </tr>
        {% endfor %}
        </table>
      </div>

    </div>

  </div>
<script type="text/javascript">
    const productID = {{ productID }};
    const productBeltCount = {{ productBeltCount }};

	var IP = '192.168.1.51';
	const beltWidth= 70;
	function allElementsFromPoint(x, y) {
		console.log('movement');
		var element, elements = [];
		element = document.elementFromPoint(x, y);
		console.log('element',element,x,y);
		return element;
	}
    $(".cell").click(function(){
        const cell = $(this);
        const barcode = cell[0].getAttribute("data-barcode");
        const assignedProductID = cell[0].getAttribute("data-product-id");
		const filled = cell[0].getAttribute("data-filled");
        const id = $(this).attr("id");        
        if(filled != "0"){
		    alert("you can't do this, this bent has already assigned to another product!!");
			return;
		}	
        const rIndex = id.indexOf('r');
		const cIndex = id.indexOf('c');
		const row = id.substring(id.indexOf('r')+1,id.indexOf('c'));
		const col = id.substring(id.indexOf('c')+1,id.length);
		console.log("col",col,"row",row);
        let nextCells = [];
        if(productBeltCount > 1 )
        {
            for(let j=1;j<productBeltCount;j++){
                let k = parseInt(col)+j;
                const cellID = "\"#r"+row+"c"+k+"\"";
                const adjacentCell = $("#r"+row+"c"+k);
                const filled = adjacentCell[0].getAttribute("data-filled");
                if (parseInt(filled) >0){
                        alert("you can't do this bent, this product needs more than one bent,the next bent is assigned to another product!!");
                        return;
                }
                nextCells.push(k);
            }
        }    
		cell.css({background:'yellow'}); 
        nextCells.forEach(function(item){
            $("#r"+row+"c"+item).css({background:'yellow'});
        });
        // needed data: start pallet id, product id,  bentCount, created date, modified date
        // we will add the assign functionality
        // now we will send ajax request so these changes update in the database , unit_id
        let update = false;
        if(assignedProductID != ''){
            update = true; // to be checke
        }
        else if( assignedProductID == '')
            update = false;

        console.log(assignedProductID,productID);
        $.ajax({
            url: 'http://'+IP+'/store/index.php?route=api/pallet/assignPalletProduct',
            async: false,
            type: 'post',
            data: {  
                barcode: barcode, productID:productID,bentCount:productBeltCount,update:update
            },
            crossDomain: true,
            success:function(){
                location.reload();
            }
        }).done(function(json){
            console.log(json);
            if(json['error'] == 1)
                alert('Not Allowed Operation');
            else 
                location.reload();
        });            
    });
	$(".draggable").draggable({ 
		revert: true,
		cursor: "move",
		start: function(event, ui) {
				console.log('event is being dropped');
        console.dir('object is :',$(event.target).attr("id"));
				console.dir(ui.helper.context.id);
				console.dir(ui.helper.context.innerHTML);
        console.log(ui.helper.clone());
			},

		stop:function(event,ui){
			var el = allElementsFromPoint(event.pageX,event.pageY);
			const productName = ui.helper.context.innerHTML;
			console.log(ui.helper.context);
			const palletCount = ui.helper.context.getAttribute("data-pallet-count");
			const productID = ui.helper.context.getAttribute("id");
			var td = $(el).filter('td').not($(this));
			// now as you got the cell get its parent col and row: get the row and col of it
			console.log('elements',td);
			var pageX  = td[0].offsetLeft;
			var pageY  = td[0].offsetTop;
			console.log('element id',td[0].id);
			const barCode = td[0].getAttribute("data-barcode");
			const filled = td[0].getAttribute("data-filled");
			const assignedProductID = td[0].getAttribute("data-product-id");

			if(filled != "0"){
				alert("you can't do this, this bent has already assigned to another product!!");
				return;
			}			   
			const rIndex = td[0].id.indexOf('r');
			const cIndex = td[0].id.indexOf('c');
			const row = td[0].id.substring(td[0].id.indexOf('r')+1,td[0].id.indexOf('c'));
			const col = td[0].id.substring(td[0].id.indexOf('c')+1,td[0].id.length);
			const maxCol = parseInt(col)+parseInt(palletCount)-1;
			console.log("col",col,"palletCount",palletCount,"maxCol",maxCol);

			if(maxCol > 11){ // 6 is column count will be dynamic
				alert("you can't do this bent, not enought space next to the product !!");
				return;
			}
			let nextCells = [];
			if(palletCount > 1 )
			{

				for(let j=1;j<palletCount;j++){
					let k = parseInt(col)+j;
					const cellID = "\"#r"+row+"c"+k+"\"";
					const adjacentCell = $("#r"+row+"c"+k);
					const filled = adjacentCell[0].getAttribute("data-filled");
					if (parseInt(filled) >0){
							alert("you can't do this bent, this product needs more than one bent,the next bent is assigned to another product!!");
							return;
					}
					nextCells.push(k);
				}
			}

			console.log('drag ended',pageX,pageY,row,col,barCode);
			td[0].innerHTML = productName;
			td.css({background:'yellow'}); 
			nextCells.forEach(function(item){
				$("#r"+row+"c"+item).css({background:'yellow'});
				$("#r"+row+"c"+item).html(productName);
	
			});
			// needed data: start pallet id, product id,  bentCount, created date, modified date
			// we will add the assign functionality
			// now we will send ajax request so these changes update in the database , unit_id
			let update = false;
			if(assignedProductID != ''){
				update = true; // to be checke
			}
			else if( assignedProductID == '')
			   update = false;

			console.log(assignedProductID,productID);
			$.ajax({
				url: 'http://'+IP+'/store/index.php?route=api/pallet/assignPalletProduct',
				async: false,
				type: 'post',
				data: {  
					barcode: barCode, productID:productID,bentCount:palletCount,update:update
				},
				crossDomain: true,
				success:function(){
					location.reload();
				}
			}).done(function(json){
				console.log(json);
				if(json['error'] == 1)
					alert('Not Allowed Operation');
				else 
					location.reload();
			});
		}

	});
</script>
</div>
{{ footer }} 