{{ header }}
{{ column_left }}
<div id="content">
	<div class="page-header">
		<div class="container-fluid">
			<div class="pull-right">
				<button type="submit" form="form-attribute" data-toggle="tooltip" title="{{ button_save }}" class="btn btn-primary">
					<i class="fa fa-save"></i>
				</button>
				<a href="{{ cancel }}" data-toggle="tooltip" title="{{ button_cancel }}" class="btn btn-default">
					<i class="fa fa-reply"></i>
				</a>
			</div>
			<h1>{{ heading_title }}</h1>
			<ul class="breadcrumb">
				{% for breadcrumb in breadcrumbs %}
					<li>
						<a href="{{ breadcrumb.href }}">{{ breadcrumb.text }}</a>
					</li>
				{% endfor %}
			</ul>
		</div>
	</div>
	<div class="row container-fluid">
		<div class="col-sm-8">
			<div class="container-fluid row">
				<div class="form-group">
					<label class="col-sm-2 control-label" for="">Product Barcode</label>
					<div class="col-sm-10">
						<input type="text" name="productBarcode" value="{{ productBarcode }}" placeholder="{{ productBarcode }}" id="productBarcode" class="form-control"/>
					</div>
				</div>
			</div>

			<div class="container-fluid row">
				<div class="form-group">
					<label class="col-sm-1 control-label" for="">Dimensions</label>
					<div class="col-sm-2">
						L<label type="text" name="length" value="" placeholder="" id="length" class="form-control"></label>
					</div>
					<div class="col-sm-2">
						Width<label type="text" name="width" value="" placeholder="" id="width" class="form-control"></label>
					</div>
					<div class="col-sm-2">
						D<label type="text" name="depth" value="" placeholder="" id="depth" class="form-control"></label>
					</div>
					<div class="col-sm-1">
						Weight<label type="text" name="weight" value="" placeholder="" id="weight" class="form-control"></label>
					</div>
					<div class="col-sm-2">
						Pallet Count<label type="text" name="bentCount" value="" placeholder="" id="bentCount" class="form-control"></label>
					</div>
					<div class="col-sm-2">
						Product ID<input type="text" name="productID" value="" placeholder="" id="productID" class="form-control"/>
					</div>
				</div>
			</div>
			<div class="container-fluid row">
				<div class="form-group">
					<label class="col-sm-2 control-label" for="">Pallet Barcode</label>
					<div class="col-sm-10">
						<input type="text" name="palletBarcode" value="{{ palletBarcode }}" placeholder="{{ palletBarcode }}" id="palletBarcode" class="form-control"/>
					</div>
				</div>
			</div>
		</div>
		<div class="col-sm-2">
    		<h3>Out of stock soon!!</h3>

			<ul>
			{% for product in decreasedProducts %}
				<li class='draggable' id="{{ product['product_id']}}" data-pallet-count="{{ product['bent_count'] }}" >{{ product['name']}} - {{ product['quantity'] }} pcs</li>
			{% endfor %}
			</ul>

	
		</div>
		<div class="col-sm-2" style="background-color:grey;">
			<h2>Products List</h2>
			<input type="text" placeholder="type some product" />
			<ul>
			{% for product in products %}
				<li class='draggable' id="{{ product['product_id']}}" data-pallet-count="{{ product['bent_count'] }}" >{{ product['name']}}</li>
			{% endfor %}
			</ul>		
		</div>
	</div>
  <br><BR><BR>

	<div class="row container-fluid" id ="units" >
	    {% for unit in map  %}
			<div class="col-sm-6">
				<h3>Unit {{ loop.index }}</h3>
				<!--<div class="limiter">
		<div class="container-table100">
			<div class="wrap-table100">
				<div class="table100 ver1 m-b-110">-->
				<table class="table table-striped table-bordered table-hover" data-vertable="ver1">
				  <caption>Belts Map in Units</caption>

  					<thead class="thead-dark">
					<tr class="row100 head">
						<th class="column100 column1" data-column="column1" scope="col">#</th>
						<th class="column100 column2" data-column="column2" scope="col">1</th>
						<th class="column100 column3" data-column="column3" scope="col">2</th>
						<th class="column100 column4" data-column="column4" scope="col">3</th>
						<th class="column100 column5" data-column="column5" scope="col">4</th>
						<th class="column100 column6" data-column="column6" scope="col">5</th>
						<th class="column100 column7" data-column="column7" scope="col">6</th>
					</tr>
				</thead>
				<tbody class="">
				{% for item in unit %}
					<tr class="row100">
					<th scope="row"  > {{ loop.index }}</th>
					{% for pallet in item %}

						<td  data-column="column{{ loop.index }}" id="r{{ pallet[8]}}c{{ pallet[7]}}" data-filled="{{ pallet[1] }}" data-product-id="{{ pallet[10] }}" data-barcode="{{ pallet[9]}}" data-pallet-count="{{ pallet[5]}}"
						{% if  pallet[3]  == 0 %}
							class="full column100 column{{ loop.index }}"
						{% elseif pallet[3] == -1  %}
							class="empty column100 column{{ loop.index }}"
						{% elseif pallet[3] > 0  %}
							class="assigned column100 column{{ loop.index }}"
						{% endif %}
						
						 > {{ pallet[4] }} - {{ pallet[1] }} / {{ pallet[6]}} </td>
					{% endfor %}
					</tr>
				{% endfor %}
				</tbody>	
				</table>
			</div><!--</div></div></div></div>-->
  		{% endfor %}
	  
	</div>


</div>
<script type="text/javascript">
	$("#productBarcode").focus();
	var IP = '192.168.1.51';
	const beltWidth= 70;
  const productDimensions = [145,70,60];
  const shelfDimension = [150,600,beltWidth];
  
	function allElementsFromPoint(x, y) {
		console.log('movement');
		var element, elements = [];
		element = document.elementFromPoint(x, y);
		console.log('element',element,x,y);
		return element;
	}
	$(".draggable").draggable({ 
		revert: true,
		cursor: "move",
		start: function(event, ui) {
				console.log('event is being dropped');
                 //to get the id
                 //ui.draggable.attr('id') or ui.draggable.get(0).id or ui.draggable[0].id
                console.dir('object is :',$(event.target).attr("id"));
				console.dir(ui.helper.context.id);
				console.dir(ui.helper.context.innerHTML);

                console.log(ui.helper.clone());
			},

		stop:function(event,ui){
			var el = allElementsFromPoint(event.pageX,event.pageY);
			const productName = ui.helper.context.innerHTML;
			console.log(ui.helper.context);
			const palletCount = ui.helper.context.getAttribute("data-pallet-count");
			const productID = ui.helper.context.getAttribute("id");
			var td = $(el).filter('td').not($(this));
			// now as you got the cell get its parent col and row: get the row and col of it
			console.log('elements',td);
			var pageX  = td[0].offsetLeft;
			var pageY  = td[0].offsetTop;
			console.log('element id',td[0].id);
			const barCode = td[0].getAttribute("data-barcode");
			const filled = td[0].getAttribute("data-filled");
			const assignedProductID = td[0].getAttribute("data-product-id");

			if(filled != "0"){
				alert("you can't do this, this bent has already assigned to another product!!");
				return;
			}			   
			const rIndex = td[0].id.indexOf('r');
			const cIndex = td[0].id.indexOf('c');
			const row = td[0].id.substring(td[0].id.indexOf('r')+1,td[0].id.indexOf('c'));
			const col = td[0].id.substring(td[0].id.indexOf('c')+1,td[0].id.length);
			const maxCol = parseInt(col)+parseInt(palletCount)-1;
			console.log("col",col,"palletCount",palletCount,"maxCol",maxCol);

			if(maxCol > 6){ // 6 is column count will be dynamic
				alert("you can't do this bent, not enought space next to the product !!");
				return;
			}
			let nextCells = [];
			if(palletCount > 1 )
			{

				for(let j=1;j<palletCount;j++){
					let k = parseInt(col)+j;
					const cellID = "\"#r"+row+"c"+k+"\"";
					const adjacentCell = $("#r"+row+"c"+k);
					const filled = adjacentCell[0].getAttribute("data-filled");
					if (parseInt(filled) >0){
							alert("you can't do this bent, this product needs more than one bent,the next bent is assigned to another product!!");
							return;
					}
					nextCells.push(k);
				}
			}

			console.log('drag ended',pageX,pageY,row,col,barCode);
			td[0].innerHTML = productName;
			td.css({background:'yellow'}); 
			nextCells.forEach(function(item){
				$("#r"+row+"c"+item).css({background:'yellow'});
				$("#r"+row+"c"+item).html(productName);
	
			});
			// needed data: start pallet id, product id,  bentCount, created date, modified date
			// we will add the assign functionality
			// now we will send ajax request so these changes update in the database , unit_id
			let update = false;
			if(assignedProductID != ''){
				update = true; // to be checke
			}
			else if( assignedProductID == '')
			   update = false;

			console.log(assignedProductID,productID);
			$.ajax({
				url: 'http://'+IP+'/store/index.php?route=api/pallet/assignPalletProduct',
				async: false,
				type: 'post',
				data: {  
					palletID: barCode, productID:productID,bentCount:palletCount,update:update
				},
				crossDomain: true,
				success:function(){
					//location.reload();
				}
			}).done(function(json){
				console.log(json);
				if(json['error'] == 1)
					alert('Not Allowed Operation');
				else 
					location.reload();
			});
		}

	   });
	productID = 0;
	$.ajaxSetup({ cache: false ,containment: "#units", scroll: false});

	var api_token = '';

	$.ajax({
	  url: 'http://'+IP+'/store/index.php?route=api/login&key=LA6g3ogGx7lgceCO2uiFZJ4QCwfe93SY54OYi2Pvjnrnxr55sFygOMT1sATi0b7y439oTRZPlM2s9ZY9Qt6tLOYqyDcoVXmhNAChHV2wL3ptKSlaWxMtO5XHhsokshxVyCGiKgMMU775z4IVy549FxY4rTRYb8UVlGNHJBcDIQgkRXdWziUpkzJP6ybm1gUPIIVn5ehCXxQTiRXvqXc6dd0zz4MddwWnQdRMMbdS5wF2IszhxPunqKAYx2If6YZA',
	  type: 'post',
	  dataType: 'json',
	  data: '',
	  crossDomain: true,
	  success: function(json) {
	    $('.alert').remove();
	    if (json['error']) {
	      if (json['error']['key']) {
	        $('#content > .container-fluid').prepend('<div class="alert alert-danger"><i class="fa fa-exclamation-circle"></i> ' + json['error']['key'] + ' <button type="button" class="close" data-dismiss="alert">&times;</button></div>');
	      }
	      if (json['error']['ip']) {
	        $('#content > .container-fluid').prepend('<div class="alert alert-danger"><i class="fa fa-exclamation-circle"></i> ' + json['error']['ip'] + ' <button type="button" id="button-ip-add" data-loading-text="{{ text_loading }}" class="btn btn-danger btn-xs pull-right"><i class="fa fa-plus"></i>{{ button_ip_add }}</button></div>');
	      }
	    }
	    if (json['api_token']) {
	      api_token = json['api_token'];
	    }
	  },
	  error: function(xhr, ajaxOptions, thrownError) {
	  	alert('failure');

	    alert(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);
	  }
	});
	// checksum calculation for GTIN-8, GTIN-12, GTIN-13, GTIN-14, and SSCC
	// based on http://www.gs1.org/barcodes/support/check_digit_calculator
	function isValidBarcode(barcode) {
	  // check length
	  if (barcode.length < 8 || barcode.length > 18 ||
	      (barcode.length != 8 && barcode.length != 12 &&
	      barcode.length != 13 && barcode.length != 14 &&	      
	      barcode.length != 18)) {
	    return false;
	  }

	  return true;
	}
	function onClickCell(event, field, value, row, $element) {
		alert($element.text());
		$('.clicked-text').text($element.text());
		$('.clicked-field').text(field);
		$('.clicked-value').text(value);
		$('.alert').removeClass('hidden');
	}	
	$('.unit').on('click-cell.bs.table', onClickCell);

	function getProductID(barcode){
		$.ajax({
			url: 'http://'+IP+'/store/index.php?route=api/product/get',
			async: false,
		  	type: 'post',
		  	data: {sku: barcode},
		    crossDomain: true,
			  success: function(json) {
			  	  
			  },
			  error: function(xhr, ajaxOptions, thrownError) {
		  		alert('Get Product ID failure');
		    	alert(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);
			    }
		}).done(function(json){
	    productId = json['product_id'];
      	// get product model to name it to use it in selecting cells
      	var model = json['model'];
      	allCells = $("."+model);
      	//$("."+model).effect( "shake", { direction: "left", times: 4, distance: 101}, 2000 );
      	$("."+model).animate({
        	opacity: 0.70,
        	color:"red"
      	}).addClass( "activeCell" );;
      		console.log(allCells);
			$("#productID").val(productId);
			$("#bentCount").html(json['bent_count']);
			$("#length").html(json['length']);
			$("#width").html(json['width']);
			$("#depth").html(json['height']);
			$("#weight").html(json['weight']);

			return productId;
	    });
		return productId;
	}
8699878420021

	$("#productBarcode").on("change", function () {
    	$('.activeCell').removeClass('activeCell');

		//don't activate this if the input is not 13 digit
		var barCode = $("#productBarcode").val();	
		if(barCode.length > 12){
			var test1 = isValidBarcode(barCode);
			if(!test1){
				alert('not valid barcode');
				event.preventDefault();
			}
			productID = getProductID(barCode);	
		}
		
		// if true get the product and its details and prepare the map
		$("#palletBarcode").focus();
	}); 

	$("#palletBarcode").on("change", function () {
		/// steps:
		/// get the product id and the barcode of the pallet
		/// check if this product is assigned to that pallet
		/// check if this pallet is not full
		/// if both conditions are true then do the add stock code
		const sku = $("#productBarcode").val();
		productID = $("#productID").val();
		let barCode = $("#palletBarcode").val();		      

		if ( sku == '' || typeof productID === 'undefined')
		{
			alert("Enter the barcode of the product, first");
			event.preventDefault();
			return;
		}				
		$.ajax({
			url:'http://'+IP+'/store/index.php?route=api/pallet/updateStock',
			type:'post',
			data:{
				palletID: barCode,
				productID: productID
			},

			crossDomain:true,
			success:function(json){
				console.log("Result of update stock",json);
				if(json == 'Not Allowed Operation' )
					alert("Not Allowed");

			},
			error: function(xhr, ajaxOptions, thrownError) {
		  		alert('Failed to know if the product can be added to this pallet.');
		    	alert(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);
		    } 
		}).done(function(json){
			console.log(json);
			$("#productBarcode").val("");//units
			$("#palletBarcode").val("");//units
			$("#productID").val("");
			$("#length").val("");
			$("#width").val("");
			$("#depth").val("");
			$("#weight").val("");
			$("#bentCount").val("");
			if(json == 1)
	    		alert("Added to stock");
			else 
				alert("Failed to add to stock!!!");
			location.reload();
		});

	}); 

  function calculatePositioning(shelfDimension,productDimensions){
	if(productDimensions[0]>=shelfDimension[0]){
		return [0,0,0]; //0 product using zero belt
	}
	else {
		let neededBeltCount = Math.ceil(productDimensions[1]/shelfDimension[2]);
		let maxQuantitiy = Math.floor(shelfDimension[1]/productDimensions[2]);
		let quantityPerBelt = maxQuantitiy/neededBeltCount;
		return [quantityPerBelt,maxQuantitiy,neededBeltCount];
	}
	}
	function findOptimizedPosition(shelfDimension,pd){
		let allPostitions = [];
		allPostitions.push(calculatePositioning(shelfDimension,[pd[0],pd[1],pd[2]]));
		allPostitions.push(calculatePositioning(shelfDimension,[pd[0],pd[2],pd[1]]));
		allPostitions.push(calculatePositioning(shelfDimension,[pd[1],pd[2],pd[0]]));
		allPostitions.push(calculatePositioning(shelfDimension,[pd[1],pd[0],pd[2]]));
		allPostitions.push(calculatePositioning(shelfDimension,[pd[2],pd[0],pd[1]]));
		allPostitions.push(calculatePositioning(shelfDimension,[pd[2],pd[1],pd[0]]));
		console.log(allPostitions);
	}
</script>
{{ footer }}
